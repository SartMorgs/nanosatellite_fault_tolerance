library IEEE;
use IEEE.STD_LOGIC_ARITH.ALL;
use IEEE.STD_LOGIC_UNSIGNED.ALL;
use IEEE.STD_LOGIC_1164.ALL;

entity NETWORK is
	Generic(
		p_w_SIZE	: INTEGER := 16
	);
	Port(
		i_CLK		: in STD_LOGIC;
		i_RST		: in STD_LOGIC;
		-- Entradas dos processadores
		i_PR1		: in STD_LOGIC_VECTOR((p_w_SIZE-1) DOWNTO 0);
		i_PR2		: in STD_LOGIC_VECTOR((p_w_SIZE-1) DOWNTO 0);
		i_PR3		: in STD_LOGIC_VECTOR((p_w_SIZE-1) DOWNTO 0);
		i_PR4		: in STD_LOGIC_VECTOR((p_w_SIZE-1) DOWNTO 0);
		-- SaÃ­das para os processadores
		o_PR1		: in STD_LOGIC_VECTOR((p_w_SIZE-1) DOWNTO 0);
		o_PR2		: in STD_LOGIC_VECTOR((p_w_SIZE-1) DOWNTO 0);
		o_PR3		: in STD_LOGIC_VECTOR((p_w_SIZE-1) DOWNTO 0);
		o_PR4		: in STD_LOGIC_VECTOR((p_w_SIZE-1) DOWNTO 0)
	);
end NETWORK;

architecture nt of NETWORK is

--------------------------------- CHANNEL ROUTERS --------------------------------------------
	signal w_R1			: STD_LOGIC;
	signal w_R2			: STD_LOGIC;
	signal w_R3			: STD_LOGIC;
	signal w_R4			: STD_LOGIC;

--------------------------------- WRITE-ENABLE ROUTERS --------------------------------------------
	signal w_WR_R1		: STD_LOGIC;
	signal w_WR_R2		: STD_LOGIC;
	signal w_WR_R3		: STD_LOGIC;
	signal w_WR_R4		: STD_LOGIC;

-------------------------------------- AUXILIARS -------------------------------------------------
	signal w_FS			: STD_LOGIC;
	signal w_CLK		: STD_LOGIC;
	

-------------------------------- DECODE-CHANNEL COMPONENT -------------------------------------------
	component DECODE_CHANNEL is
		Generic(
			p_ch_R1	: INTEGER := 16;
			p_ch_R2	: INTEGER := 32;
			p_ch_R3	: INTEGER := 48;
			p_ch_R4	: INTEGER := 64
		);
		Port(
			i_CLK		: in STD_LOGIC;
			i_RST		: in STD_LOGIC;
			i_FS		: in STD_LOGIC;
			o_WR_R1	: out STD_LOGIC;
			o_WR_R2	: out STD_LOGIC;
			o_WR_R3	: out STD_LOGIC;
			o_WR_R4	: out STD_LOGIC
		);
	end component;

-------------------------------------- ROUTER COMPONENT -----------------------------------------
	component ROUTER is
		Generic(
			p_w_SIZE : integer := 16;
			p_b_SIZE	: integer := 10
		)
		Port(
			DATA		: inout STD_LOGIC;
			i_DATA	: in STD_LOGIC_VECTOR((p_w_SIZE-1) DOWNTO 0);
			i_CLK		: in STD_LOGIC;
			i_RST		: in STD_LOGIC;
			i_FS		: in STD_LOGIC;
			i_WR		: in STD_LOGIC;
			o_DATA	: out STD_LOGIC_VECTOR((p_w_SIZE-1) DOWNTO 0)
		);
	end component;

-------------------------------------- CROSSBAR COMPONENT -----------------------------------------	
	component CROSSBAR is
		Generic(
			p_w_SIZE		: integer := 16;
			p_r_COUNT	: integer := 4
		);
		Port(
			io_R1		: inout STD_LOGIC;
			io_R2		: inout STD_LOGIC;
			io_R3		: inout STD_LOGIC;
			io_R4		: inout STD_LOGIC;
			i_FS		: in STD_LOGIC;
			i_CLK		: in STD_LOGIC;
			i_RST		: in STD_LOGIC;
			i_WR_R1	: in STD_LOGIC;
			i_WR_R2	: in STD_LOGIC;
			i_WR_R3	: in STD_LOGIC;
			i_WR_R4	: in STD_LOGIC
		);
	end component;

begin
	
------------------------ DECODE-CHANNEL ------------------------
	DC	: DECODE_CHANNEL
	Generic Map(
		p_ch_R1	=> p_w_SIZE*1,
		p_ch_R2	=> p_w_SIZE*2,
		p_ch_R3	=> p_w_SIZE*3,
		p_ch_R4	=> p_w_SIZE*4
	);
	Port Map(
		i_CLK		=> w_CLK,
		i_RST		=> i_RST,
		i_FS		=> w_FS,
		o_WR_R1	=> w_WR_R1,
		o_WR_R2	=> w_WR_R2,
		o_WR_R3	=> w_WR_R3,
		o_WR_R4	=> w_WR_R4
	);
	
------------------------ ROUTER 1 ------------------------
	R1: ROUTER
	Generic Map(
		p_w_SIZE	=> p_w_SIZE,
		p_b_SIZE	=>	10
	);
	Port Map(
		DATA		=> w_R1,
		i_DATA	=> i_PR1,
		i_CLK		=> w_CLK,
		i_RST		=> i_RST,
		i_FS		=> w_FS,
		i_WR		=> w_WR_R1,
		o_DATA	=> o_PR1
	);
	
------------------------ ROUTER 2 ------------------------
	R2: ROUTER
	Generic Map(
		p_w_SIZE	=> p_w_SIZE,
		p_b_SIZE	=> 10
	);
	Port Map(
		DATA		=> w_R2,
		i_DATA	=> i_PR2,
		i_CLK		=> w_CLK,
		i_RST		=> i_RST,
		i_FS		=> w_FS,
		i_WR		=> w_WR_R2,
		o_DATA	=> o_PR2
	);
	
------------------------ ROUTER 3 ------------------------
	R3: ROUTER
	Generic Map(
		p_w_SIZE	=> p_w_SIZE,
		p_b_SIZE	=>	10
	);
	Port Map(
		DATA		=> w_R3,
		i_DATA	=> i_PR3,
		i_CLK		=> w_CLK,
		i_RST		=> i_RST,
		i_FS		=> w_FS,
		i_WR		=> w_WR_R3,
		o_DATA	=> o_PR3
	);
	
------------------------ ROUTER 4 ------------------------
	R4: ROUTER
	Generic Map(
		p_w_SIZE	=> p_w_SIZE,
		p_b_SIZE	=> 10
	);
	Port Map(
		DATA		=> w_R4,
		i_DATA	=> i_PR4,
		i_CLK		=> w_CLK,
		i_RST		=> i_RST,
		i_FS		=> w_FS,
		i_WR		=> w_WR_R4,
		o_DATA	=>	o_PR4
	);
	
------------------------ CROSSBAR ------------------------
	CR	: CROSSBAR
	Generic Map(
		p_w_SIZE		=> p_w_SIZE,
		p_r_COUNT	=> 4
	);
	Port Map(
		io_R1		=> w_R1,
		io_R2		=> w_R2,
		io_R3		=> w_R3,
		io_R4		=> w_R4,
		i_FS		=> w_FS,
		i_CLK		=> w_CLK,
		i_RST		=> i_RST,
		i_WR_R1	=> w_WR_R1,
		i_WR_R2	=> w_WR_R2,
		i_WR_R3	=> w_WR_R3,
		i_WR_R4	=> w_WR_R4
	);


end nt;