library IEEE;
use IEEE.STD_LOGIC_ARITH.ALL;
use IEEE.STD_LOGIC_UNSIGNED.ALL;
use IEEE.STD_LOGIC_1164.ALL;

entity DECODE_CHANNEL is
	Generic(
		p_ch_R1	: INTEGER := 16;
		p_ch_R2	: INTEGER := 32;
		p_ch_R3	: INTEGER := 48;
		p_ch_R4	: INTEGER := 64
	);
	Port(
		i_CLK		: in STD_LOGIC;
		i_RST		: in STD_LOGIC;
		i_FS		: in STD_LOGIC;
		o_WR_R1	: out STD_LOGIC;
		o_WR_R2	: out STD_LOGIC;
		o_WR_R3	: out STD_LOGIC;
		o_WR_R4	: out STD_LOGIC
	);
end DECODE_CHANNEL;

architecture dc of DECODE_CHANNEL is

	VARIABLE count	: INTEGER range 0 to 64 := 0

begin

	i_WR_R1		<= '1' when (count >= 0 && count < p_ch_R1) else '0';
	i_WR_R2		<= '1' when (count >= p_ch_R1 && count < p_ch_R2) else '0';
	i_WR_R3		<= '1' when (count >= p_ch_R2 && count < p_ch_R3) else '0';
	i_WR_R4		<= '1' when (count >= p_ch_R3 && count < p_ch_R4) else '0';

	Process(i_CLK, i_RST)
	begin
		if(i_RST = '0') then
			count 	:= 0;
			o_WR_R1	<= '0';
			o_WR_R2	<= '0';
			o_WR_R3	<= '0';
			o_WR_R4	<= '0';
		elsif rising_edge(i_CLK) then
			count := count + 1;
		end if;
	end process
	
	process(i_FS) then
	begin
		if(i_FS = '1') then
			count := 0;
		end if;
	end process;

end dc;